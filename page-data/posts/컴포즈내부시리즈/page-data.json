{"componentChunkName":"component---src-templates-posts-template-index-tsx","path":"/posts/컴포즈내부시리즈","result":{"pageContext":{"currentCategory":"컴포즈내부시리즈","categories":["All","의존성주입","Kotlin","컴포즈내부시리즈","Effective-kotlin"],"edges":[{"node":{"id":"f3b4e1f8-6727-528e-a840-54834decfcc8","excerpt":"Positional Memoization Compose는 컴파일러가 함수의 input에 의하여 반환되는 결과를 cache하는 Global Memoization을 가지고 있습니다. 같은 위치에서 input으로 호출되면 같은 output이 나오게됨을 가정하고, 값을 cache하고 재사용하는 방법입니다. composable function은 파라미터로 items과 item을 받아서 find 연산을 진행하고 있습니다. 위 연산을  키워드를 활용하면, items과 item은 slot table에 저장하게 됩니다. 연산을 진행한 result 결과 값도 slot table에 저장됩니다. 한마디로, input과 output이 slot에 저장되게 됩니다. 위치 메모이제이션은 composable 함수가 두 번째 호출할 때 remember에 의해 저장되어 있는 input 값을 보고 새로 들어오는 값과 비교해 변경된 것이 없다면 이전에 저장한 데이터를 활용합니다. 위치 키는 함수의 시그니쳐와 call-…","fields":{"slug":"/compose-internal-3/"},"frontmatter":{"categories":"컴포즈내부시리즈","title":"Compose Internal (3) - 위치메모이제이션","date":"2023.11.08"}},"next":{"fields":{"slug":"/compose-internal-2/"}},"previous":{"fields":{"slug":"/kotlin-inline-function-reified/"}}},{"node":{"id":"bdb2eefd-34f9-5481-b207-c08cbff714e4","excerpt":"컴포즈에서 이용되는 데이터들을 저장하기 위해서 slot table을 활용합니다. Slot Table slot table 은 Gap Buffer 자료구조와 Array 자료구조를 활용한 클래스라고 생각하면 간단하다. 배열의 단점은 사이즈가 고정되어 있고 찾으려면 직접 처음부터 찾아봐야한다. 그로 인해 O(N)이라는 시간복잡도를 가지게 된다. 컴포즈는 리컴포지션이 잦게 발생한다. 모든 연산이 O(N)이 발생한다면, 느려지게 된다. 그래서 O(1) 기대하게 된다. 배열의 단점을 극복하고자 Gap Buffer 자료구조를 활용해 slot table 을 이용한다. 은 Gap Buffer 자료구조를 기반으로 빠른 선형 접근에 최적화된 메모리 구조이다. slot table은 컴포지션에 대한 모든 정보들이 저장된다. slot table은 2가지의 선형 배열을 가지고 있다. 과 이다. group slot table에 특정 도메인에 속한 데이터가 저장되는 범위이다. 예로 들면, State, Modifi…","fields":{"slug":"/compose-internal-2/"},"frontmatter":{"categories":"컴포즈내부시리즈","title":"Compose Internal (2) - slot table","date":"2023.11.08"}},"next":{"fields":{"slug":"/compose-internal-1/"}},"previous":{"fields":{"slug":"/compose-internal-3/"}}},{"node":{"id":"94e17da8-3625-5c98-a8e4-faebd1262a37","excerpt":"Compose 분류 작업 방향에 따라  ➡️  ➡️  Compose Compiler와 Compose Runtime은 코틀린 네이티브에 속하기 때문에 멀티 플랫폼으로 사용 가능하다. 그로 인해서, Compose UI는 각각의 플랫폼에 따라서 다른 UI 규칙을 가져가게 된다. 컴포즈 시스템의 기본 컴포즈 시스템은  과  을 기반으로 작동한다. 은 멱등성 개념과 비슷하다. 같은 위치에서 input으로 호출되면 같은 output이 나오는 것이며, 값을 캐싱하고 재사용하는 기술이다. 은 발생한 컴포지션에 대한 정보들을 저장되는 공간이며  자료구조에  라는 개념을 더해서 활용한다. 컴포저블이 UI로 그려지는 원리  -  -  과정을 통해 컴포저블이 UI로 그려지게 된다. 컴포지션 slot table에 초기 gap이 할당되고 최초 상태의 컴포저블 데이터가 등록되는 상태 리컴포지션은 컴포지션 이후 상태가 변경으로 컴포저블이 변경되어 slot table에 값을 업데이트하는 것을 지칭한다. 방출 slo…","fields":{"slug":"/compose-internal-1/"},"frontmatter":{"categories":"컴포즈내부시리즈","title":"Compose Internal (1) - 기본 시스템 원리","date":"2023.11.07"}},"next":{"fields":{"slug":"/effective-kotlin-item-1/"}},"previous":{"fields":{"slug":"/compose-internal-2/"}}}]}},"staticQueryHashes":["1321405810","3649515864"]}