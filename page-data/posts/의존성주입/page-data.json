{"componentChunkName":"component---src-templates-posts-template-index-tsx","path":"/posts/의존성주입","result":{"pageContext":{"currentCategory":"의존성주입","categories":["All","의존성주입","Kotlin","컴포즈내부시리즈","Effective-kotlin"],"edges":[{"node":{"id":"6b0abfd5-6928-5bec-a338-73c710a0cade","excerpt":"Hilt 등장 hilt는 안드로이드를 위한 표준적인 DI 솔루션을 제공해준다. hilt는 최초의 안드로이드 표준적인 DI 솔루션이 아니라 개인이나 회사에서 별도로 구현해서 만들기도 했다. 안드로이드 팀은 최초의 개발 언어를 Java로 채택을 했습니다. 그로인해 의존성 주입도 자바의 방식을 많이 따르곤 했다. Java를 위한 의존성 주입 표준 JSR 330 자바 플랫폼에 대한 스펙을 제한하고 규격화한 표준 사양을 의미한다. 자바를 위한 의존성 주입에 대한 표준성 방법을 정의한 내용이다. 대부분 자바의 의존 라이브러리들은 JSR 330 스펙을 충족하며 hilt도 충족하고 있다. DI 솔루션(Android) DI 솔루션으로 Guide, Dagger2, Koin, Hilt가 존재합니다. Guice 안드로이드 이전 의존성 주입 라이브러리 자바를 위한 의존성 주입 런타임에 의존성 주입 리플렉션 기반; 런타임에 로드된 다른 클래스 정보를 가져올 수 있는 장점이 있지만, 비용이 큰 작업을 가지고…","fields":{"slug":"/hilt/"},"frontmatter":{"categories":"의존성주입","title":"Hilt 등장","date":"2024.01.27"}},"next":{"fields":{"slug":"/dependency-injection-1/"}},"previous":null},{"node":{"id":"e1e7f05e-3d60-5aca-942b-0993c9b47bd1","excerpt":"의존성 주입이란? 의존성 의존성을 한 문장으로 표현하면 어떤 대상이 참조하는 객체(또는 함수)라고 부를 수 있습니다. 위의 코드를 보면  라고 표현을 합니다. Car의 입장에서 Engine에 의존하고 Engine는 의존성이 됩니다. 의존성 주입 의존성 주입은 대상 객체에 의존성을 제공하는 기술이라고 부를 수 있습니다. Car 클래스 내에서 직접 Engine을 생성하고 있으며, Car는 Engine 인스턴스를 생성하는 책임을 가지고 있습니다. Engine 생성 책임을 제거해보면, 위와 같은 코드로 변경할 수 있습니다. Engine을 외부에서 전달 받을 수 있게 됩니다. Car는 Engine 생성에 대한 책임 없게 됩니다. 위와 같은 설계 패턴을 IoC(제어의 역전) 이라고 부릅니다. 객체 생성의 책임을 내부에서 외부로 뒤집으면서 Engine에 대한 제어를 역전 시킨다는 의미를 가지게 됩니다. 이것을 의존성 주입이라고 부를 수 있습니다. 엔진을 게속해서 생서시켜 주입한다면, Car 객…","fields":{"slug":"/dependency-injection-1/"},"frontmatter":{"categories":"의존성주입","title":"의존성 주입이란","date":"2024.01.15"}},"next":{"fields":{"slug":"/kotlin-inline-function-reified/"}},"previous":{"fields":{"slug":"/hilt/"}}}]}},"staticQueryHashes":["1321405810","3649515864"]}