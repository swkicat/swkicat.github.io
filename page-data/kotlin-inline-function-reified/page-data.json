{"componentChunkName":"component---src-templates-post-template-index-tsx","path":"/kotlin-inline-function-reified/","result":{"data":{"cur":{"id":"49969fc3-7ba3-542e-b459-f6eeefe99780","html":"<h2 id=\"inline-function\" style=\"position:relative;\"><a href=\"#inline-function\" aria-label=\"inline function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>inline function</h2>\n<blockquote>\n<p>Using higher-order functions imposes certain runtime penalties: each function is an object, and it captures a closure. A closure is a scope of variables that can be accessed in the body of the function. Memory allocations (both for function objects and classes) and virtual calls introduce runtime overhead.</p>\n</blockquote>\n<p><code class=\"language-text\">inline functions</code>은 코틀린에서만 제공하는 키워드입니다.</p>\n<p>공식 문서에서 고차함수를 사용하면 패널티가 발생하며, 추가적인 메모리 할당 함수 호출로 런 타임 오버헤드가 발생한다고 합니다.<br>\n람다를 사용하게 될 시, 각 함수는 객체로 변환되어 메모리 할당과 가상 호출 단계를 거치게 되고 이 과정 속에서 오버헤드가 발생합니다.</p>\n<p>하지만, <code class=\"language-text\">inline functions</code>은 내부적으로 함수 내용을 호출되는 위치해 복사해 런 타임 오버헤드를 줄여주게 됩니다.</p>\n<br>\n<h3 id=\"어떤-오버헤드가-발생할까\" style=\"position:relative;\"><a href=\"#%EC%96%B4%EB%96%A4-%EC%98%A4%EB%B2%84%ED%97%A4%EB%93%9C%EA%B0%80-%EB%B0%9C%EC%83%9D%ED%95%A0%EA%B9%8C\" aria-label=\"어떤 오버헤드가 발생할까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>어떤 오버헤드가 발생할까?</h3>\n<p>고차함수란 함수를 인자로 전달하거나 함수의 반환값으로 처리되는 경우라고 볼 수 있습니다.<br>\n코틀린으로 작성된 코드를 디컴파일해서 자바코드로 확인이 가능합니다.</p>\n<blockquote>\n<p>IDE에서 <code class=\"language-text\">Tool</code> - <code class=\"language-text\">Kotlin</code> - <code class=\"language-text\">Kotlin BytesCode</code> - <code class=\"language-text\">Decompile</code>을 통해 확인이 가능합니다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>lambda<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"first\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">lambda</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"start\"</span></span><span class=\"token punctuation\">)</span>\n    test <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"~ing\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"end\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainKt</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@NotNull</span> <span class=\"token class-name\">Function0</span> lambda<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">Intrinsics</span><span class=\"token punctuation\">.</span><span class=\"token function\">checkNotNullParameter</span><span class=\"token punctuation\">(</span>lambda<span class=\"token punctuation\">,</span> <span class=\"token string\">\"lambda\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">String</span> var1 <span class=\"token operator\">=</span> <span class=\"token string\">\"first\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>var1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      lambda<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">String</span> var0 <span class=\"token operator\">=</span> <span class=\"token string\">\"start\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>var0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Function0</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">.</span><span class=\"token constant\">INSTANCE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      var0 <span class=\"token operator\">=</span> <span class=\"token string\">\"end\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>var0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> var0<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>test 함수 인자로 Function0 타입의 객체를 생성하고 이 객체의 invoke 호출을 통해 실행되고 있습니다.</p>\n<br>\n<h3 id=\"inline\" style=\"position:relative;\"><a href=\"#inline\" aria-label=\"inline permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>inline</h3>\n<p>코틀린 언어로 작성한 코드에 <code class=\"language-text\">inline</code> 키워드를 추가하게 되면 살짝 달리질 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainKt</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@NotNull</span> <span class=\"token class-name\">Function0</span> lambda<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">int</span> $i$f$test <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">Intrinsics</span><span class=\"token punctuation\">.</span><span class=\"token function\">checkNotNullParameter</span><span class=\"token punctuation\">(</span>lambda<span class=\"token punctuation\">,</span> <span class=\"token string\">\"lambda\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">String</span> var2 <span class=\"token operator\">=</span> <span class=\"token string\">\"first\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>var2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      lambda<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">String</span> var0 <span class=\"token operator\">=</span> <span class=\"token string\">\"start\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>var0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">int</span> $i$f$test <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">String</span> var1 <span class=\"token operator\">=</span> <span class=\"token string\">\"first\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>var1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">int</span> var2 <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">String</span> var3 <span class=\"token operator\">=</span> <span class=\"token string\">\"~ing\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>var3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      var0 <span class=\"token operator\">=</span> <span class=\"token string\">\"end\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>var0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> var0<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>inline 키워드를 추가한 후 디컴파일된 자바 코드를 보면 함수의 코드가 직접 추가된 것을 확인이 가능합니다.</p>\n<br>\n<h2 id=\"noinline-function\" style=\"position:relative;\"><a href=\"#noinline-function\" aria-label=\"noinline function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>noinline function</h2>\n<p>인자 앞에 <code class=\"language-text\">noinline</code> 키워드가 추가된다면 해당 인자는 <code class=\"language-text\">inline</code>에서 제외가 됩니다.\n<code class=\"language-text\">noinline</code> 키워드가 붙은 인자는 다른 함수의 인자로 전달하는 것이 가능해집니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">inline</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>lambda1<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit<span class=\"token punctuation\">,</span> <span class=\"token keyword\">noinline</span> lambda2<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span>lambda2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ... 생략</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span>lambda<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">lambda</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">{</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"1\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"2\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<h2 id=\"non-local-control-flow\" style=\"position:relative;\"><a href=\"#non-local-control-flow\" aria-label=\"non local control flow permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>non-local control flow</h2>\n<ul>\n<li>코틀린에서 lambda function에서는 라벨을 통한 return을 제외하곤 return 문을 사용하면 에러가 발생합니다.</li>\n<li>‘return’ is not allowed here 문구와 함께 return 허용이 되지 않는다고 발생합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> lambda <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"hello stitch\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token comment\">// 'return' is not allowed here</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>inline 함수의 인자로 넘어가는 경우에는 return의 사용문이 가능해집니다.</p>\n<p>inline 키워드를 사용하면 위에서 볼 수 있듯이 코드가 직접 삽입됩니다. return을 만나게 되면 inline 함수를 호출하는 상위 함수가 return되면서 실행이 종료됩니다. 그로 인해 그 이후에 작성된 코드가 출력되지 않을 수 있습니다.</p>\n<p>하지만, non-local return의 문제점도 존재한다.</p>\n<ol>\n<li>람다나 내부 함수에서 외부 함수를 종료할 수 있기 때문에 예기치 않은 흐름 제어가 발생할 수 있다.</li>\n<li>람다 혹은 내부 함수에서 외부 함수까지 반환되는 비지역 반환은 코드 연결성을 떨어뜨리고, 수정, 확장에 어려움이 존재한다.</li>\n<li>특정한 람다나 함수 동작을 독립적으로 테스트하기가 어려워진다. 외부 스코프에 의존하게 되기 때문이다.</li>\n<li>직접 작성자가 아닌 이상 반환의 흐름을 이해하기 어려울 수 있다.</li>\n<li>1번에서와 같이 예상치 못한 방식으로 종료가 되면, 부작용이 발생하고 결국 코드의 안정성이 사라질 수 있다.</li>\n</ol>\n<blockquote>\n<p>비지역 반환의 문제점을 crossinline을 통해 해결이 가능하며, 기존처럼 ‘return’ is not allowed here 라는 오류를 만나게 될 것이다.</p>\n</blockquote>\n<br>\n<h2 id=\"crossinline\" style=\"position:relative;\"><a href=\"#crossinline\" aria-label=\"crossinline permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>crossinline</h2>\n<p><code class=\"language-text\">inline</code> 함수에서 인자로 받은 lambda를 다른 객체를 만들어 할당하게 된다면, 에러가 발생합니다.<br>\n즉, 파라미터로 전달받은 lambda를 호출 할 때 함수 몸체에서 직접 호출하지 않고 block 등 다른 실행 컨텍스트를 통해 호출해야하는 경우가 존재한다. 이 경우 람다 내에서 비지역 반환을 제어할 수 없게 됩니다. 이를 지정하기 위해서는 crossinline를 사용하게 됩니다.</p>\n<br>\n<h2 id=\"reified\" style=\"position:relative;\"><a href=\"#reified\" aria-label=\"reified permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>reified</h2>\n<p>inline과 함께 reified 키워드를 사용하면 제네릭를 사용하는 메서드까지 손쉽게 처리가 가능합니다. 범용성 좋은 메소드를 만들기 위해 <T>를 주로 사용하게 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">:</span> T<span class=\"token punctuation\">)</span></code></pre></div>\n<p>위의 코드는 T 객체는 타입에 대한 정보가 런타임에서 <code class=\"language-text\">Type Erase</code> 됩니다. 그래서 정보를 알 수가 없습니다.</p>\n<p>일반적으로 Class를 함께 넘겨서 type을 확인 후 casting 하는 과정으로 코드를 작성합니다. 하지만, <code class=\"language-text\">inline</code>과 <code class=\"language-text\">reified</code>를 함께 사용하면 T 타입을 런타임에 접근할 수 있게 해줍니다.</p>\n<p>컴파일러는 type argument로 사용된 실제 타입을 알고 만들어진 바이트코드를 직접 클래스에 대응되도록 바꿔줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> String<span class=\"token punctuation\">.</span><span class=\"token function\">toKotlinObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> T <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> mapper <span class=\"token operator\">=</span> <span class=\"token function\">jacksonObjectMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> mapper<span class=\"token punctuation\">.</span><span class=\"token function\">readValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> T<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>위 코드는 JsonObject를 파싱하는데 사용합니다. 타입 파라미터 T의 Class를 얻으려고하면 컴파일 에러가 발생합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span>T <span class=\"token operator\">:</span> Any<span class=\"token operator\">></span> String<span class=\"token punctuation\">.</span><span class=\"token function\">toKotlinObject</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">:</span> KClass<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> T <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">val</span> mapper <span class=\"token operator\">=</span> <span class=\"token function\">jacksonObjectMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> mapper<span class=\"token punctuation\">.</span><span class=\"token function\">readValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>에러를 없애기 위해서 Class 자체를 직접 넘겨줌으로써 해결을 할 수 있습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">inline</span> <span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">reified</span> T <span class=\"token operator\">:</span> Any<span class=\"token operator\">></span> String<span class=\"token punctuation\">.</span><span class=\"token function\">toKotlinObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> T <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">val</span> mapper <span class=\"token operator\">=</span> <span class=\"token function\">jacksonObjectMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> mapper<span class=\"token punctuation\">.</span><span class=\"token function\">readValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> T<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>inline과 reified을 함께 사용한다면, T의 Class를 받을 필요도 없고, T는 일반적인 클래스로 사용이 될 수 있습니다.</li>\n</ul>\n<br>\n<h3 id=\"참고자료\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C\" aria-label=\"참고자료 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고자료</h3>\n<ul>\n<li><a href=\"https://kotlinlang.org/docs/inline-functions.html\">Kotlin Docs</a></li>\n<li><a href=\"https://zoiworld.tistory.com/403\">예시 설명</a></li>\n</ul>","excerpt":"inline function Using higher-order functions imposes certain runtime penalties: each function is an object, and it captures a closure. A closure is a scope of variables that can be accessed in the body of the function. Memory allocations (both for function objects and classes) and virtual calls introduce runtime overhead. 은 코틀린에서만 제공하는 키워드입니다. 공식 문서에서 고차함수를 사용하면 패널티가 발생하며, 추가적인 메모리 할당 함수 호출로 런 타임 오버헤드가 발생한다고 합니다. 람다를 사용하게 될 시, 각 함수는 객체로 변환되어 메모리 할당과 가상 호출 단계를 거치게 되고 이 과정 속에서 오버헤드가 발생합니다. 하지만, 은…","frontmatter":{"date":"2023.11.22","title":"inline function과 reified","categories":"Kotlin","emoji":"🧢"},"fields":{"slug":"/kotlin-inline-function-reified/"}},"next":{"id":"f3b4e1f8-6727-528e-a840-54834decfcc8","html":"<h2 id=\"positional-memoization\" style=\"position:relative;\"><a href=\"#positional-memoization\" aria-label=\"positional memoization permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Positional Memoization</h2>\n<p>Compose는 컴파일러가 함수의 input에 의하여 반환되는 결과를 cache하는 Global Memoization을 가지고 있습니다.</p>\n<blockquote>\n<p>같은 위치에서 input으로 호출되면 같은 output이 나오게됨을 가정하고, 값을 cache하고 재사용하는 방법입니다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Composable</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">ItemText</span><span class=\"token punctuation\">(</span>items<span class=\"token operator\">:</span> List<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> item<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> result <span class=\"token operator\">=</span> items<span class=\"token punctuation\">.</span><span class=\"token function\">find</span> <span class=\"token punctuation\">{</span> it <span class=\"token operator\">==</span> item <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span>text <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">result</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>composable function은 파라미터로 items과 item을 받아서 find 연산을 진행하고 있습니다.<br>\n위 연산을 <code class=\"language-text\">remember</code> 키워드를 활용하면, items과 item은 slot table에 저장하게 됩니다. 연산을 진행한 result 결과 값도 slot table에 저장됩니다. 한마디로, input과 output이 slot에 저장되게 됩니다.</p>\n<p>위치 메모이제이션은 composable 함수가 두 번째 호출할 때 remember에 의해 저장되어 있는 input 값을 보고 새로 들어오는 값과 비교해 변경된 것이 없다면 이전에 저장한 데이터를 활용합니다.</p>\n<p>위치 키는 함수의 시그니쳐와 call-site, 실행 순서 기준으로 고유한 값으로 결정됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">⛳️ tip\ncall-site는 함수가 호출된 위치라고 생각하면 됩니다.</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Composable</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span>text <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"stitch\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>같은 call-site 이지만, 컴포저블 데이터가 실제로 다 다른 공간에 배치됩니다. 저장될 때에는 컴포저블의 위치 키 값으로 remember 값, 등을 저장하게 되는 것이다.<br>\n기본적으로 컴포즈는 위치 메모이제이션과 멱등성을 보장된다는 하에 설계가 되었습니다.</p>\n<blockquote>\n<p>컴파일러는 이전 수행에 값들을 한 번은 저장해야 하지만, 연산 자체는 매우 가벼워집니다.\n연산은 함수가 재활용됨에 따라 전체 UI에 걸쳐서 발생할 수 있지만 이전 연산들에 대한 정보는\n해당 위치에 대응되어 저장되므로 여러 곳에서 호출되더라도 각각의 호출 위치가 다르므로 문제가 되지 않습니다.</p>\n</blockquote>\n<h3 id=\"예시\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%8B%9C\" aria-label=\"예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예시</h3>\n<p>우리는 이미 코드를 작성하면서 경험을 해보았습니다.\n<code class=\"language-text\">LazyList</code> 키워드를 사용하면, 아이템의 배치가 달라지면, 해당 컴포저블을 리컴포지션이 일어났을 것입니다.<br>\n그러한 이유는 데이터를 저장할 키가 변경되었기 때문입니다. 그래서 리컴포지션을 최소화하고 방지하기 위해서 <code class=\"language-text\">key</code> 키워드를 사용합니다.\n<code class=\"language-text\">key</code> 키워드는 LazyListScope 내에서만 사용하는 것이 아니라, 일반적으로 컴포저블 함수 내에서 사용이 가능합니다.</p>","frontmatter":{"date":"2023.11.08","title":"Compose Internal (3) - 위치메모이제이션","categories":"컴포즈내부시리즈","emoji":"🔎"},"fields":{"slug":"/compose-internal-3/"}},"prev":{"id":"e1e7f05e-3d60-5aca-942b-0993c9b47bd1","html":"<h2 id=\"의존성-주입이란\" style=\"position:relative;\"><a href=\"#%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%A3%BC%EC%9E%85%EC%9D%B4%EB%9E%80\" aria-label=\"의존성 주입이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>의존성 주입이란?</h2>\n<h3 id=\"의존성\" style=\"position:relative;\"><a href=\"#%EC%9D%98%EC%A1%B4%EC%84%B1\" aria-label=\"의존성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>의존성</h3>\n<p><strong>의존성</strong>을 한 문장으로 표현하면 어떤 대상이 참조하는 객체(또는 함수)라고 부를 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> Engine\n\n<span class=\"token keyword\">class</span> Car <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> engine <span class=\"token operator\">=</span> <span class=\"token function\">Engine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>위의 코드를 보면 <code class=\"language-text\">Car는 Engine에 의존한다(의존적이다)</code> 라고 표현을 합니다.</li>\n<li>Car의 입장에서 Engine에 의존하고 Engine는 의존성이 됩니다.</li>\n</ul>\n<h3 id=\"의존성-주입\" style=\"position:relative;\"><a href=\"#%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%A3%BC%EC%9E%85\" aria-label=\"의존성 주입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>의존성 주입</h3>\n<p><strong>의존성 주입</strong>은 대상 객체에 의존성을 제공하는 기술이라고 부를 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> Engine\n\n<span class=\"token keyword\">class</span> Car <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> engine <span class=\"token operator\">=</span> <span class=\"token function\">Engine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>Car 클래스 내에서 직접 Engine을 생성하고 있으며, Car는 Engine 인스턴스를 생성하는 책임을 가지고 있습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> Engine\n\n<span class=\"token keyword\">class</span> <span class=\"token function\">Car</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> engine<span class=\"token operator\">:</span> Engine<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>Engine 생성 책임을 제거해보면, 위와 같은 코드로 변경할 수 있습니다.</li>\n<li>Engine을 <strong>외부에서 전달</strong> 받을 수 있게 됩니다.</li>\n<li>Car는 Engine 생성에 대한 <strong>책임 없게</strong> 됩니다.</li>\n</ul>\n<p>위와 같은 설계 패턴을 IoC(제어의 역전) 이라고 부릅니다. 객체 생성의 책임을 내부에서 외부로 뒤집으면서 Engine에 대한 제어를 역전 시킨다는 의미를 가지게 됩니다. 이것을 의존성 주입이라고 부를 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> gasolineCar <span class=\"token operator\">=</span> <span class=\"token function\">Car</span><span class=\"token punctuation\">(</span><span class=\"token function\">GasolineEngine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> dieselCar <span class=\"token operator\">=</span> <span class=\"token function\">Car</span><span class=\"token punctuation\">(</span><span class=\"token function\">DieseEngine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>엔진을 게속해서 생서시켜 주입한다면, Car 객체에는 변경점이 생기지 않게 된다.</li>\n<li>재사용: Car 객체를 변경하지 않게 될 수 있다.</li>\n<li>디커플링: 결합도를 낮춰 준다</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> <span class=\"token function\">Car</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">val</span> engine<span class=\"token operator\">:</span> Engine<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">val</span> battery<span class=\"token operator\">:</span> Battery<span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>위와 같이 필요한 의존성을 외부에서 주입받을 수 있게 되며, 기존 Car 클래스가 가지고 있는 책임들이 줄어들게 된다.</li>\n<li>외부에서 주입해주는 객체들을 보면 하나의 기능만을 책임 줄 수 있는 캡슐화할 수 있도록 단일 책임 원칙을 지킬 수 있게 된다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> CarTest <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation builtin\">@Test</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">`Car 테스트`</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> car <span class=\"token operator\">=</span> <span class=\"token function\">Car</span><span class=\"token punctuation\">(</span><span class=\"token function\">FakeEngine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n        <span class=\"token keyword\">val</span> car2 <span class=\"token operator\">=</span> <span class=\"token function\">Car</span><span class=\"token punctuation\">(</span><span class=\"token function\">FakeBrokenEngine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>의존성 주입의 또 다른 장점은 테스트를 쉽게 만들어 준다.</li>\n<li>엔진을 밖에서 주입해주기 때문에 Car 객체의 테스트와 실패를 확인할 수 있게 된다.</li>\n</ul>\n<h3 id=\"injector\" style=\"position:relative;\"><a href=\"#injector\" aria-label=\"injector permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Injector</h3>\n<p>Injector는 <strong>의존성을 클라이언트에게 제공하는 역할</strong>이라고 부릅니다.<br>\nInjector는 때로는 Container, Assembler, Provider, Factory라고 부르기도 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> Injector <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">getEngine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">Engine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Injector가 없는 경우</span>\n    <span class=\"token keyword\">val</span> engine <span class=\"token operator\">=</span> <span class=\"token function\">Engine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> car <span class=\"token operator\">=</span> <span class=\"token function\">Car</span><span class=\"token punctuation\">(</span>engine<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// Injector가 있는 경우</span>\n    <span class=\"token keyword\">val</span> engine <span class=\"token operator\">=</span> <span class=\"token function\">Injector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getEngine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> car <span class=\"token operator\">=</span> <span class=\"token function\">Car</span><span class=\"token punctuation\">(</span>engine<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>\n<p>Car는 Engine를 참조</p>\n</li>\n<li>\n<p>Injector는 Engine을 의존</p>\n</li>\n<li>\n<p>Injector는 Car에 주입</p>\n</li>\n<li>\n<p>injector.getEngine()을 통해 새로운 엔진을 계속해서 만들어낼 수 있습니다.</p>\n</li>\n<li>\n<p>만일, 동일한 엔진을 가지고 싶다면, <code class=\"language-text\">val engine = Engine()</code>로 injector 클래스에 만들어서 <code class=\"language-text\">injector.engine</code> 이라는 변수에 접근하면 됩니다.</p>\n</li>\n</ul>\n<h3 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리</h3>\n<ul>\n<li>의존성 주입은 클래스간 결합도가 낮아집니다.</li>\n<li>재상용성이 가능하다.</li>\n<li>보일러플레이트 감소한다.</li>\n<li>테스트가 간편해진다.</li>\n<li>자원공유 하는 등의 의존성 관리가 용이하다.</li>\n</ul>","frontmatter":{"date":"2024.01.15","title":"의존성 주입이란","categories":"의존성주입","emoji":"⛓️"},"fields":{"slug":"/dependency-injection-1/"}},"site":{"siteMetadata":{"siteUrl":"https://swkicat.github.io","comments":{"utterances":{"repo":"taewooyo/gatsby-blog"}}}}},"pageContext":{"slug":"/kotlin-inline-function-reified/","nextSlug":"/compose-internal-3/","prevSlug":"/dependency-injection-1/"}},"staticQueryHashes":["1321405810","3649515864"]}