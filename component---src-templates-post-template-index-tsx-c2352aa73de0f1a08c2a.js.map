{"version":3,"file":"component---src-templates-post-template-index-tsx-c2352aa73de0f1a08c2a.js","mappings":"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","sources":["webpack://stitch-gatsby-blog/./src/models/post.ts","webpack://stitch-gatsby-blog/./src/components/postHeader/styled.ts","webpack://stitch-gatsby-blog/./src/components/postHeader/index.tsx","webpack://stitch-gatsby-blog/./src/components/postNavigator/styled.ts","webpack://stitch-gatsby-blog/./src/components/postNavigator/index.tsx","webpack://stitch-gatsby-blog/./src/components/utterances/styled.ts","webpack://stitch-gatsby-blog/./src/components/utterances/index.tsx","webpack://stitch-gatsby-blog/./src/templates/post-template/styled.ts","webpack://stitch-gatsby-blog/./src/templates/post-template/index.tsx"],"sourcesContent":["import { MarkdownRemark } from '../type';\n\nexport default class PostClass {\n  id;\n  excerpt;\n  emoji;\n  html;\n  slug;\n  title;\n  author;\n  date;\n  categories;\n\n  constructor(node: MarkdownRemark) {\n    const { id, html, excerpt, frontmatter, fields } = node;\n    const { slug } = fields;\n    const { emoji, categories, title, author, date } = frontmatter;\n\n    this.id = id;\n    this.excerpt = excerpt;\n    this.emoji = emoji;\n    this.html = html;\n    this.slug = slug;\n    this.title = title;\n    this.author = author;\n    this.date = date;\n    this.categories = categories.split(' ');\n  }\n}","import styled from '@emotion/styled';\nimport { Link } from 'gatsby';\n\nimport { hoverUnderline, MOBILE_MEDIA_QUERY } from '@/src/styles/const';\n\nexport const Header = styled.header`\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  width: 100%;\n  padding-bottom: 40px;\n  border-bottom: 1px solid ${({ theme }) => theme.color.gray20};\n  margin: 40px 0;\n  word-break: keep-all;\n`;\n\nexport const Emoji = styled.div`\n  font-size: 78px;\n  margin-bottom: 20px;\n`;\n\nexport const Info = styled.div`\n  display: flex;\n  font-size: 15px;\n  color: ${({ theme }) => theme.color.gray80};\n  font-family: GmarketSansLight;\n`;\n\nexport const Categories = styled.div`\n  margin-bottom: 5px;\n  font-size: 15px;\n`;\n\nexport const Category = styled(Link)`\n  margin-right: 4px;\n  color: ${({ theme }) => theme.color.gray60};\n  ${({ theme }) => hoverUnderline(theme)};\n  &:after {\n    background-color: ${({ theme }) => theme.color.gray60};\n  }\n`;\n\nexport const Title = styled.h1`\n  font-size: 32px;\n  margin-bottom: 6px;\n  line-height: 1.3;\n\n  @media ${MOBILE_MEDIA_QUERY} {\n    font-size: 25px;\n  }\n`;","import React from 'react';\n\nimport PostClass from '@/src/models/post';\n\nimport * as S from './styled';\n\ntype PostHeaderProps = {\n  post: PostClass;\n  // viewCount: number;\n};\n\nconst PostHeader: React.FC<PostHeaderProps> = ({ post }) => {\n  return (\n    <S.Header>\n      {post.emoji && <S.Emoji>{post.emoji}</S.Emoji>}\n      <S.Categories>\n        {post.categories.map((category) => (\n          <S.Category key={category} to={`/posts/${category}`}>\n            {category}\n          </S.Category>\n        ))}\n      </S.Categories>\n\n      <S.Title>{post.title}</S.Title>\n      <S.Info>\n        {post.date}\n        {/* {` · ${viewCount} views`} */}\n      </S.Info>\n    </S.Header>\n  );\n};\nexport default PostHeader;","import styled from '@emotion/styled';\nimport { Link } from 'gatsby';\n\nexport const Wrapper = styled.div`\n  display: grid;\n  width: 100%;\n  grid-template-columns: 49.3% 49.3%;\n  column-gap: 1.4%;\n`;\n\nexport const PostCard = styled(Link)`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  background-color: ${({ theme }) => theme.color.gray10};\n  border-radius: 6px;\n  padding: 15px;\n  height: 105px;\n\n  cursor: pointer;\n\n  &:hover {\n    background-color: ${({ theme }) => theme.color.gray20};\n    .title {\n      text-decoration: underline;\n    }\n  }\n\n  &.prev {\n    margin-right: auto;\n  }\n\n  &.next {\n    margin-left: auto;\n  }\n`;\n\nexport const Direction = styled.div`\n  color: ${({ theme }) => theme.color.gray60};\n  margin-bottom: 10px;\n`;\n\nexport const Title = styled.div`\n  font-size: 16px;\n  line-height: 150%;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  word-break: break-word;\n  display: -webkit-box;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n`;","import React from 'react';\n\nimport PostClass from '@/src/models/post';\n\nimport * as S from './styled';\n\ntype PostNavigatorProps = {\n  prevPost: PostClass;\n  nextPost: PostClass;\n};\n\nconst PostNavigator: React.FC<PostNavigatorProps> = ({ prevPost, nextPost }) => {\n  return (\n    <S.Wrapper>\n      <div>\n        {nextPost && (\n          <S.PostCard className='prev' key={nextPost.id} to={nextPost.slug}>\n            <S.Direction>이전 글</S.Direction>\n            <S.Title>{nextPost.title}</S.Title>\n          </S.PostCard>\n        )}\n      </div>\n      <div>\n        {prevPost && (\n          <S.PostCard className='next' key={prevPost.id} to={prevPost.slug}>\n            <S.Direction>다음 글</S.Direction>\n            <S.Title>{prevPost.title}</S.Title>\n          </S.PostCard>\n        )}\n      </div>\n    </S.Wrapper>\n  );\n};\n\nexport default PostNavigator;","import styled from '@emotion/styled';\n\nexport const Wrapper = styled.div`\n  margin: 30px 0;\n`;","import { ThemeManagerContext } from 'gatsby-emotion-dark-mode';\nimport React, { createRef, useContext, useEffect, useRef } from 'react';\n\nimport * as S from './styled';\n\nconst src = 'https://utteranc.es/client.js';\nconst branch = 'main';\n\ntype UtterancesProps = {\n  repo: string;\n  path: string;\n};\n\nconst Utterances: React.FC<UtterancesProps> = ({ repo, path }) => {\n  const rootElm = createRef<HTMLDivElement>();\n  const isUtterancesLoaded = useRef(false);\n  const theme = useContext(ThemeManagerContext);\n\n  useEffect(() => {\n    if (!rootElm.current) return;\n\n    const utterances = document.createElement('script');\n    const utterancesConfig: { [key: string]: unknown } = {\n      src,\n      repo,\n      branch,\n      'theme': theme.isDark ? 'photon-dark' : 'github-light',\n      'label': 'comment',\n      'async': true,\n      'issue-term': 'pathname',\n      'crossorigin': 'anonymous',\n    };\n\n    Object.keys(utterancesConfig).forEach((configKey) => {\n      utterances.setAttribute(configKey, utterancesConfig[configKey] as string);\n    });\n    rootElm.current.appendChild(utterances);\n\n    if (isUtterancesLoaded.current) {\n      rootElm.current.replaceChild(utterances, rootElm.current.firstChild as Node);\n    } else {\n      isUtterancesLoaded.current = true;\n    }\n\n    console.log('utterances', utterances);\n  }, [rootElm, path, theme.isDark]);\n\n  return <S.Wrapper className='utterances' ref={rootElm} />;\n};\n\nexport default Utterances;","import styled from '@emotion/styled';\n\nexport const PostContent = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  width: 100%;\n  margin-bottom: 30px;\n`;","import { graphql } from 'gatsby';\nimport React from 'react';\n\nimport PostHeader from '@/src/components/postHeader';\nimport PostNavigator from '@/src/components/postNavigator';\nimport Seo from '@/src/components/seo';\nimport Utterances from '@/src/components/utterances';\nimport Layout from '@/src/layout';\nimport PostClass from '@/src/models/post';\nimport { Post, SiteMetadata } from '@/src/type';\n\nimport * as S from './styled';\n\ntype PostTemplateProps = {\n  location: Location;\n  data: { prev: Post; next: Post; cur: Post; site: { siteMetadata: SiteMetadata }; markdownRemark: Post };\n};\n\nconst PostTemplate: React.FC<PostTemplateProps> = ({ location, data }) => {\n  const curPost = new PostClass(data.cur);\n  const prevPost = data.prev && new PostClass(data.prev);\n  const nextPost = data.next && new PostClass(data.next);\n  const utterancesRepo = data.site.siteMetadata.comments.utterances.repo;\n\n  return (\n    <Layout location={location}>\n      <Seo title={`개발자 스티치 | ${curPost?.title}`} description={curPost?.excerpt} />\n      {/* <PostHeader post={curPost} viewCount={viewCount ?? 0} /> */}\n      <PostHeader post={curPost} />\n      <S.PostContent>\n        <div className='markdown' dangerouslySetInnerHTML={{ __html: curPost.html }} />\n      </S.PostContent>\n      <PostNavigator prevPost={prevPost} nextPost={nextPost} />\n      {utterancesRepo && <Utterances repo={utterancesRepo} path={curPost.slug} />}\n    </Layout>\n  );\n};\n\nexport default PostTemplate;\n\nexport const pageQuery = graphql`\n  query ($slug: String, $nextSlug: String, $prevSlug: String) {\n    cur: markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      html\n      excerpt(pruneLength: 500, truncate: true)\n      frontmatter {\n        date(formatString: \"YYYY.MM.DD\")\n        title\n        categories\n        emoji\n      }\n      fields {\n        slug\n      }\n    }\n\n    next: markdownRemark(fields: { slug: { eq: $nextSlug } }) {\n      id\n      html\n      frontmatter {\n        date(formatString: \"YYYY.MM.DD\")\n        title\n        categories\n        emoji\n      }\n      fields {\n        slug\n      }\n    }\n\n    prev: markdownRemark(fields: { slug: { eq: $prevSlug } }) {\n      id\n      html\n      frontmatter {\n        date(formatString: \"YYYY.MM.DD\")\n        title\n        categories\n        emoji\n      }\n      fields {\n        slug\n      }\n    }\n\n    site {\n      siteMetadata {\n        siteUrl\n        comments {\n          utterances {\n            repo\n          }\n        }\n      }\n    }\n  }\n`;"],"names":["PostClass","node","id","html","excerpt","frontmatter","fields","slug","emoji","categories","title","author","date","this","split","Header","_styled","target","_ref","theme","color","gray20","Emoji","name","styles","Info","_ref2","gray80","Categories","Category","Link","_ref3","gray60","_ref4","hoverUnderline","_ref5","Title","MOBILE_MEDIA_QUERY","post","___EmotionJSX","S","map","category","key","to","Wrapper","PostCard","gray10","Direction","prevPost","nextPost","className","repo","path","rootElm","createRef","isUtterancesLoaded","useRef","useContext","ThemeManagerContext","useEffect","current","utterances","document","createElement","utterancesConfig","src","branch","isDark","Object","keys","forEach","configKey","setAttribute","appendChild","replaceChild","firstChild","console","log","ref","PostContent","location","data","curPost","cur","prev","next","utterancesRepo","site","siteMetadata","comments","Layout","Seo","description","PostHeader","dangerouslySetInnerHTML","__html","PostNavigator","Utterances"],"sourceRoot":""}